- name: vars
  gather_facts: no
  hosts: all
  no_log: true
  tasks:
    - name: load vars
      include_vars: '../provision.vars.yml'
#-@ https://stackoverflow.com/a/42635237/1139122
- name: prepare for ansible
  become: true
  hosts: all
  gather_facts: false
  tasks:
    - name: install python
      changed_when:
        - pythonInstall.stdout != ''
        - pythonInstall.stdout != '\r\n'
      raw: bash -c "test -e /usr/bin/python || (apt -y update && apt install -y python-is-python3)"
      register: pythonInstall
    - name: install acl # required for becoming different users
      apt:
        name: acl
        state: present
- name: update packages
  become: true
  hosts: all
  tasks:
    - name: update packages
      apt:
        cache_valid_time: 86400
        upgrade: dist
        update_cache: yes
- name: install db
  become: true
  hosts: all
  tasks:
    - name: install mysql
      apt:
        name:
          - mysql-client
          - mysql-server
        state: present
- name: manage filesystem permissions
  become: true
  hosts: all
  tasks:
    - name: allow staff to edit '/usr/local/bin' files
      file:
        group: staff #--allow limited privilege updates
        mode: '2775'
        owner: root
        path: /usr/local/bin
- name: install web
  become: true
  handlers:
    - name: restart apache
      command: 'apachectl graceful'
      listen: 'apache conf change'
    - name: restart php
      service:
        name: 'php{{phpVersion}}-fpm'
        state: restarted
  hosts: all
  tasks:
    - name: install php
      apt:
        name:
          - imagemagick
          - php
          - php-cli
          - php-curl
          - php-fpm
          - php-imagick
          - php-gd
          - php-intl
          - php-mbstring
          - php-mysql
          - php-xml
          - php-zip #-- for composer
        state: present
      notify: 'restart php'
    - name: install apache
      apt:
        name: apache2
        state: present
    - name: configure server name
      lineinfile:
        dest: /etc/apache2/apache2.conf
        line: 'ServerName {{serverName}}'
        regexp: '^ServerName.*$'
        state: present
      notify: 'restart apache'
    - name:
      lineinfile:
        backrefs: true
        dest: '/etc/apache2/sites-enabled/000-default.conf'
        line: '\1/sites'
        regexp: '^(\s+DocumentRoot /var/www).*$'
        state: present
    - name: enable vhost_alias for auto-domains
      apache2_module:
        name: vhost_alias
        state: present
      notify: 'restart apache'
    - name: install default vhost file
      template:
        dest: /etc/apache2/sites-available/000-default.conf
        src: vhosts.dev.l.conf.j2
      notify: 'restart apache'
    - name: install vhost file for auto domains
      copy:
        dest: /etc/apache2/sites-enabled/zzz-vhosts.conf
        src: vhosts.l.conf
      notify: 'restart apache'
    - name: configure vhost log format
      lineinfile:
        dest: /etc/apache2/apache2.conf
        line: 'LogFormat "%V:%{local}p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined'
        regexp: '^LogFormat.*vhost_combined$'
        state: present
      notify: 'restart apache'
    - name: remove mod_php module
      command: a2dismod php{{phpVersion}}
      args:
        removes: /etc/apache2/mods-enabled/php{{phpVersion}}.conf
      notify: 'restart apache'
    - name: enable fpm php module for apache
      command: a2enmod proxy_fcgi
      args:
        creates: /etc/apache2/mods-enabled/proxy_fcgi.load
      notify: 'restart apache'
    - name: switch to h2 incompatible mpm
      #-# must restart apache here since things break without doing it immediately
      shell: 'a2dismod mpm_prefork && a2enmod mpm_event && service apache2 restart'
      args:
        removes: /etc/apache2/mods-enabled/mpm_prefork.conf
        creates: /etc/apache2/mods-enabled/mpm_event.conf
    - name: enable mod_expires
      apache2_module:
        name: expires
        state: present
      notify: 'restart apache'
    - name: enable mod_headers
      apache2_module:
        name: headers
        state: present
      notify: 'restart apache'
    - name: enable mod_rewrite
      apache2_module:
        name: rewrite
        state: present
      notify: 'restart apache'
    #-# we're not using cgi-bin dir and it takes a usable url path
    - name: disable cgi-bin path
      command: a2disconf serve-cgi-bin
      args:
        removes: /etc/apache2/conf-enabled/serve-cgi-bin.conf
      notify: 'restart apache'
    - name: enable php conf for apache
      command: 'a2enconf php{{phpVersion}}-fpm' #-! version embedded
      args:
        creates: '/etc/apache2/conf-enabled/php{{phpVersion}}-fpm.conf'
      notify: 'restart apache'
    - name: set php fpm user
      lineinfile:
        dest: '/etc/php/{{phpVersion}}/fpm/pool.d/www.conf'
        line: 'user = vagrant'
        regexp: '^user = '
        state: present
      notify: 'restart php'
    - name: set php fpm group
      lineinfile:
        dest: '/etc/php/{{phpVersion}}/fpm/pool.d/www.conf'
        line: 'group = vagrant'
        regexp: '^group = '
        state: present
      notify: 'restart php'
    - name: handle phps files as php, allow access to nameless php and phps files
      template:
        dest: /etc/apache2/conf-available/php{{phpVersion}}-fpm.conf
        src: php-fpm.conf
      notify: 'restart apache'
    #--allow as many paths as possible
    - name: allow access to safe .ht prefixed files
      lineinfile:
        dest: /etc/apache2/apache2.conf
        line: '<FilesMatch "^\.ht(access|passwd)$">'
        regexp: '^\s*<FilesMatch\s+"\^\\\.ht'
        state: present
      notify: 'restart apache'
    - name: add woff2 mime type
      lineinfile:
        dest: /etc/mime.types
        line: 'font/woff2                          woff2'
        regexp: '^.*woff2$'
        state: present
      notify: 'restart apache'
- name: install build
  become: true
  hosts: all
  tasks:
    - name: install phpunit
      apt:
        name:
          - phpunit
        state: present
    - name: install css build packages
      apt:
        name:
          - node-postcss
          - sassc
        state: present
    - name: install js build packages
      apt:
        name:
          - rollup
          - uglifyjs
          - yarnpkg
        state: present
    - name: check composer's existence
      stat:
        path: '/usr/local/bin/composer'
      register: isComposerInstalled
    - name: get composer
      get_url:
        dest: /tmp/composerInstall
        url: https://getcomposer.org/installer
      when: isComposerInstalled.stat.exists != true
    - name: build composer
      become: true
      become_user: '{{adminUser}}' #--limited privileges
      command: 'php /tmp/composerInstall --filename=composer --install-dir=/tmp'
      when: isComposerInstalled.stat.exists != true
    - name: install composer
      command: 'mv /tmp/composer /usr/local/bin/composer'
      when: isComposerInstalled.stat.exists != true
    - name: clean composer installation
      file:
        path: /tmp/composerInstall
        state: absent
      when: isComposerInstalled.stat.exists != true
    - name: set composer permissions
      file:
        group: staff #--allow limited privilege updates
        mode: 0775
        owner: root
        path: /usr/local/bin/composer
- name: install utils
  become: true
  hosts: all
  tasks:
    - name: install web browsers
      apt:
        name:
          - lynx
          - w3m
        state: present
